#! /usr/bin/python

# Project Euler problem 12

"""The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?"""

import math

# This is inefficient.
def get_divs(n):  
    divs = [1, n]  
    check = 2  
    rootn = math.sqrt(n)
    
    while check < rootn:  
        if n % check == 0:  
            divs.append(check)  
            divs.append(n / check)  
        check += 1
        
    if rootn == check:  
        divs.append(check)  
        divs.sort()
        
    return divs  
    
# n(n + 1)/2, where n is the nth triangular number.
def get_tri_num(n):
    return (n * (n + 1))/2
    
done = False

# Start with the 10,000th triangular number.
nth_tri_num = 10000

while not done:
    tri_num = get_tri_num(nth_tri_num)
    divisors = get_divs(tri_num)
    
    if len(divisors) > 500:
        done = True
    else: nth_tri_num += 1

print tri_num

        